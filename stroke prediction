{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1WiD_IstEMALvjqRUeQSWw34DgzCakmBs","authorship_tag":"ABX9TyOlyfLtHFocJuZA01OKD7fv"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Importing the libraries"],"metadata":{"id":"Ymom8kcfO8lk"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","from sklearn.model_selection import train_test_split, cross_val_score\n","from sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, roc_curve\n","from imblearn.over_sampling import SMOTE\n","import matplotlib.pyplot as plt"],"metadata":{"id":"HwV4WaUnPLL_","executionInfo":{"status":"ok","timestamp":1730641023681,"user_tz":-330,"elapsed":12752,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}}},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":["Importing the dataset"],"metadata":{"id":"kJphOO6YPODm"}},{"cell_type":"code","source":["df = pd.read_csv(\"/content/drive/MyDrive/MACHINE LEARNING PROJECTS/stroke-data.csv\")"],"metadata":{"id":"q1RTszpRPE2L","executionInfo":{"status":"ok","timestamp":1730641023681,"user_tz":-330,"elapsed":8,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":261},"id":"7n4aiZ6NPI2i","executionInfo":{"status":"ok","timestamp":1730641024234,"user_tz":-330,"elapsed":560,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"d9d9b154-57f5-4349-e483-b7d44b96ce94"},"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      id  gender   age  hypertension  heart_disease ever_married  \\\n","0   9046    Male  67.0             0              1          Yes   \n","1  51676  Female  61.0             0              0          Yes   \n","2  31112    Male  80.0             0              1          Yes   \n","3  60182  Female  49.0             0              0          Yes   \n","4   1665  Female  79.0             1              0          Yes   \n","\n","       work_type Residence_type  avg_glucose_level   bmi   smoking_status  \\\n","0        Private          Urban             228.69  36.6  formerly smoked   \n","1  Self-employed          Rural             202.21   NaN     never smoked   \n","2        Private          Rural             105.92  32.5     never smoked   \n","3        Private          Urban             171.23  34.4           smokes   \n","4  Self-employed          Rural             174.12  24.0     never smoked   \n","\n","   stroke  \n","0       1  \n","1       1  \n","2       1  \n","3       1  \n","4       1  "],"text/html":["\n","  <div id=\"df-6d266dcb-9676-4d81-84a6-d66af48f6fe6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>gender</th>\n","      <th>age</th>\n","      <th>hypertension</th>\n","      <th>heart_disease</th>\n","      <th>ever_married</th>\n","      <th>work_type</th>\n","      <th>Residence_type</th>\n","      <th>avg_glucose_level</th>\n","      <th>bmi</th>\n","      <th>smoking_status</th>\n","      <th>stroke</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>9046</td>\n","      <td>Male</td>\n","      <td>67.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Yes</td>\n","      <td>Private</td>\n","      <td>Urban</td>\n","      <td>228.69</td>\n","      <td>36.6</td>\n","      <td>formerly smoked</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>51676</td>\n","      <td>Female</td>\n","      <td>61.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Yes</td>\n","      <td>Self-employed</td>\n","      <td>Rural</td>\n","      <td>202.21</td>\n","      <td>NaN</td>\n","      <td>never smoked</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>31112</td>\n","      <td>Male</td>\n","      <td>80.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Yes</td>\n","      <td>Private</td>\n","      <td>Rural</td>\n","      <td>105.92</td>\n","      <td>32.5</td>\n","      <td>never smoked</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>60182</td>\n","      <td>Female</td>\n","      <td>49.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Yes</td>\n","      <td>Private</td>\n","      <td>Urban</td>\n","      <td>171.23</td>\n","      <td>34.4</td>\n","      <td>smokes</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1665</td>\n","      <td>Female</td>\n","      <td>79.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>Yes</td>\n","      <td>Self-employed</td>\n","      <td>Rural</td>\n","      <td>174.12</td>\n","      <td>24.0</td>\n","      <td>never smoked</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6d266dcb-9676-4d81-84a6-d66af48f6fe6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6d266dcb-9676-4d81-84a6-d66af48f6fe6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6d266dcb-9676-4d81-84a6-d66af48f6fe6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e7e571e2-ec6a-4e6f-8b96-edc22fb67d79\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e7e571e2-ec6a-4e6f-8b96-edc22fb67d79')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e7e571e2-ec6a-4e6f-8b96-edc22fb67d79 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 5110,\n  \"fields\": [\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21161,\n        \"min\": 67,\n        \"max\": 72940,\n        \"num_unique_values\": 5110,\n        \"samples\": [\n          40041,\n          55244,\n          70992\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Male\",\n          \"Female\",\n          \"Other\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22.61264672311352,\n        \"min\": 0.08,\n        \"max\": 82.0,\n        \"num_unique_values\": 104,\n        \"samples\": [\n          45.0,\n          24.0,\n          33.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hypertension\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"heart_disease\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ever_married\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"No\",\n          \"Yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"work_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Self-employed\",\n          \"Never_worked\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Residence_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Rural\",\n          \"Urban\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avg_glucose_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 45.28356015058203,\n        \"min\": 55.12,\n        \"max\": 271.74,\n        \"num_unique_values\": 3979,\n        \"samples\": [\n          178.29,\n          156.69\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.854066729680158,\n        \"min\": 10.3,\n        \"max\": 97.6,\n        \"num_unique_values\": 418,\n        \"samples\": [\n          49.5,\n          18.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoking_status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"never smoked\",\n          \"Unknown\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"stroke\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":3}]},{"cell_type":"markdown","source":["Checking the structure of the data and presence of any null values"],"metadata":{"id":"4YsgDQh7Pk4t"}},{"cell_type":"code","source":["df.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"vfOTuUExPXZU","executionInfo":{"status":"ok","timestamp":1730641024235,"user_tz":-330,"elapsed":12,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"e61e33a6-f260-44fe-a358-87e70e865690"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(5110, 12)"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["df.size"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"9XUHs7fWPcG4","executionInfo":{"status":"ok","timestamp":1730641024235,"user_tz":-330,"elapsed":9,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"11258a24-26ba-403c-951b-52b1680b8ffd"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["61320"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"r71GHIPbjtA3","executionInfo":{"status":"ok","timestamp":1730641024862,"user_tz":-330,"elapsed":48,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"e6ca080f-c546-47a0-f256-a6bdba4fb859"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 5110 entries, 0 to 5109\n","Data columns (total 12 columns):\n"," #   Column             Non-Null Count  Dtype  \n","---  ------             --------------  -----  \n"," 0   id                 5110 non-null   int64  \n"," 1   gender             5110 non-null   object \n"," 2   age                5110 non-null   float64\n"," 3   hypertension       5110 non-null   int64  \n"," 4   heart_disease      5110 non-null   int64  \n"," 5   ever_married       5110 non-null   object \n"," 6   work_type          5110 non-null   object \n"," 7   Residence_type     5110 non-null   object \n"," 8   avg_glucose_level  5110 non-null   float64\n"," 9   bmi                4909 non-null   float64\n"," 10  smoking_status     5110 non-null   object \n"," 11  stroke             5110 non-null   int64  \n","dtypes: float64(3), int64(4), object(5)\n","memory usage: 479.2+ KB\n"]}]},{"cell_type":"code","source":["df.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":460},"id":"Rzw6UjGUPquT","executionInfo":{"status":"ok","timestamp":1730641024862,"user_tz":-330,"elapsed":46,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"43c0e237-10dd-434d-fab2-24862385ac8f"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["id                     0\n","gender                 0\n","age                    0\n","hypertension           0\n","heart_disease          0\n","ever_married           0\n","work_type              0\n","Residence_type         0\n","avg_glucose_level      0\n","bmi                  201\n","smoking_status         0\n","stroke                 0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>id</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>gender</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>age</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>hypertension</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>heart_disease</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>ever_married</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>work_type</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Residence_type</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>avg_glucose_level</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>bmi</th>\n","      <td>201</td>\n","    </tr>\n","    <tr>\n","      <th>smoking_status</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>stroke</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","source":["Treating the null values"],"metadata":{"id":"tCwt0uQncfE9"}},{"cell_type":"code","source":["df['bmi'].unique()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"uOZuHDy3cWpL","executionInfo":{"status":"ok","timestamp":1730641024862,"user_tz":-330,"elapsed":44,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"e7cada55-3f39-4915-bc38-ec5798643539"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([36.6,  nan, 32.5, 34.4, 24. , 29. , 27.4, 22.8, 24.2, 29.7, 36.8,\n","       27.3, 28.2, 30.9, 37.5, 25.8, 37.8, 22.4, 48.9, 26.6, 27.2, 23.5,\n","       28.3, 44.2, 25.4, 22.2, 30.5, 26.5, 33.7, 23.1, 32. , 29.9, 23.9,\n","       28.5, 26.4, 20.2, 33.6, 38.6, 39.2, 27.7, 31.4, 36.5, 33.2, 32.8,\n","       40.4, 25.3, 30.2, 47.5, 20.3, 30. , 28.9, 28.1, 31.1, 21.7, 27. ,\n","       24.1, 45.9, 44.1, 22.9, 29.1, 32.3, 41.1, 25.6, 29.8, 26.3, 26.2,\n","       29.4, 24.4, 28. , 28.8, 34.6, 19.4, 30.3, 41.5, 22.6, 56.6, 27.1,\n","       31.3, 31. , 31.7, 35.8, 28.4, 20.1, 26.7, 38.7, 34.9, 25. , 23.8,\n","       21.8, 27.5, 24.6, 32.9, 26.1, 31.9, 34.1, 36.9, 37.3, 45.7, 34.2,\n","       23.6, 22.3, 37.1, 45. , 25.5, 30.8, 37.4, 34.5, 27.9, 29.5, 46. ,\n","       42.5, 35.5, 26.9, 45.5, 31.5, 33. , 23.4, 30.7, 20.5, 21.5, 40. ,\n","       28.6, 42.2, 29.6, 35.4, 16.9, 26.8, 39.3, 32.6, 35.9, 21.2, 42.4,\n","       40.5, 36.7, 29.3, 19.6, 18. , 17.6, 19.1, 50.1, 17.7, 54.6, 35. ,\n","       22. , 39.4, 19.7, 22.5, 25.2, 41.8, 60.9, 23.7, 24.5, 31.2, 16. ,\n","       31.6, 25.1, 24.8, 18.3, 20. , 19.5, 36. , 35.3, 40.1, 43.1, 21.4,\n","       34.3, 27.6, 16.5, 24.3, 25.7, 21.9, 38.4, 25.9, 54.7, 18.6, 24.9,\n","       48.2, 20.7, 39.5, 23.3, 64.8, 35.1, 43.6, 21. , 47.3, 16.6, 21.6,\n","       15.5, 35.6, 16.7, 41.9, 16.4, 17.1, 29.2, 37.9, 44.6, 39.6, 40.3,\n","       41.6, 39. , 23.2, 18.9, 36.1, 36.3, 46.5, 16.8, 46.6, 35.2, 20.9,\n","       13.8, 31.8, 15.3, 38.2, 45.2, 17. , 49.8, 27.8, 60.2, 23. , 22.1,\n","       26. , 44.3, 51. , 39.7, 34.7, 21.3, 41.2, 34.8, 19.2, 35.7, 40.8,\n","       24.7, 19. , 32.4, 34. , 28.7, 32.1, 51.5, 20.4, 30.6, 71.9, 19.3,\n","       40.9, 17.2, 16.1, 16.2, 40.6, 18.4, 21.1, 42.3, 32.2, 50.2, 17.5,\n","       18.7, 42.1, 47.8, 20.8, 30.1, 17.3, 36.4, 12. , 36.2, 55.7, 14.4,\n","       43. , 41.7, 33.8, 43.9, 22.7, 57.5, 37. , 38.5, 16.3, 44. , 32.7,\n","       54.2, 40.2, 33.3, 17.4, 41.3, 52.3, 14.6, 17.8, 46.1, 33.1, 18.1,\n","       43.8, 50.3, 38.9, 43.7, 39.9, 15.9, 19.8, 12.3, 78. , 38.3, 41. ,\n","       42.6, 43.4, 15.1, 20.6, 33.5, 43.2, 30.4, 38. , 33.4, 44.9, 44.7,\n","       37.6, 39.8, 53.4, 55.2, 42. , 37.2, 42.8, 18.8, 42.9, 14.3, 37.7,\n","       48.4, 50.6, 46.2, 49.5, 43.3, 33.9, 18.5, 44.5, 45.4, 55. , 54.8,\n","       19.9, 17.9, 15.6, 52.8, 15.2, 66.8, 55.1, 18.2, 48.5, 55.9, 57.3,\n","       10.3, 14.1, 15.7, 56. , 44.8, 13.4, 51.8, 38.1, 57.7, 44.4, 38.8,\n","       49.3, 39.1, 54. , 56.1, 97.6, 53.9, 13.7, 11.5, 41.4, 14.2, 49.4,\n","       15.4, 45.1, 49.2, 48.7, 53.8, 42.7, 48.8, 52.7, 53.5, 50.5, 15.8,\n","       45.3, 14.8, 51.9, 63.3, 40.7, 61.2, 48. , 46.8, 48.3, 58.1, 50.4,\n","       11.3, 12.8, 13.5, 14.5, 15. , 59.7, 47.4, 52.5, 13.2, 52.9, 61.6,\n","       49.9, 54.3, 47.9, 13. , 13.9, 50.9, 57.2, 64.4, 92. , 50.8, 57.9,\n","       45.8, 47.6, 14. , 46.4, 46.9, 47.1, 13.3, 48.1, 51.7, 46.3, 54.1,\n","       14.9])"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["df['bmi'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":489},"id":"VcxFgCoUcmDh","executionInfo":{"status":"ok","timestamp":1730641024862,"user_tz":-330,"elapsed":40,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"833f227c-a936-49c8-b773-8d2986baf5c4"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["bmi\n","28.7    41\n","28.4    38\n","26.7    37\n","27.6    37\n","26.1    37\n","        ..\n","48.7     1\n","49.2     1\n","51.0     1\n","49.4     1\n","14.9     1\n","Name: count, Length: 418, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>bmi</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>28.7</th>\n","      <td>41</td>\n","    </tr>\n","    <tr>\n","      <th>28.4</th>\n","      <td>38</td>\n","    </tr>\n","    <tr>\n","      <th>26.7</th>\n","      <td>37</td>\n","    </tr>\n","    <tr>\n","      <th>27.6</th>\n","      <td>37</td>\n","    </tr>\n","    <tr>\n","      <th>26.1</th>\n","      <td>37</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>48.7</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>49.2</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>51.0</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>49.4</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>14.9</th>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>418 rows × 1 columns</p>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["df['bmi'].mean()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"QdSIXp5ncu_h","executionInfo":{"status":"ok","timestamp":1730641024863,"user_tz":-330,"elapsed":38,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"4aee6cea-a9d0-463d-ffb6-bed56cb2c632"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["28.893236911794666"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["df['bmi'].fillna(df['bmi'].mean(), inplace=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"P1rTHS6J3Xd6","executionInfo":{"status":"ok","timestamp":1730641024864,"user_tz":-330,"elapsed":34,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"c4b4bf9a-429c-4a2d-b3a5-c5e39a6d13bf"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-11-2a6d4795ba2f>:1: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df['bmi'].fillna(df['bmi'].mean(), inplace=True)\n"]}]},{"cell_type":"code","source":["df['bmi'].isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"q78TFb6n3aUw","executionInfo":{"status":"ok","timestamp":1730641024864,"user_tz":-330,"elapsed":29,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"5cd5ae6a-183d-4e96-e70e-7163f0c4c942"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["type('bmi')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"7MFe81Xb2dd_","executionInfo":{"status":"ok","timestamp":1730641024864,"user_tz":-330,"elapsed":26,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"2fd44d0b-fc8a-41d6-b2c1-4027223c1a3d"},"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["str"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["df['bmi'] = pd.to_numeric(df['bmi'], errors='coerce')"],"metadata":{"id":"G2B2JUO72hbT","executionInfo":{"status":"ok","timestamp":1730641024864,"user_tz":-330,"elapsed":23,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"9_OYhhSm2-If","executionInfo":{"status":"ok","timestamp":1730641024864,"user_tz":-330,"elapsed":22,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"7273f1a7-9377-42b2-da72-f130b5911628"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 5110 entries, 0 to 5109\n","Data columns (total 12 columns):\n"," #   Column             Non-Null Count  Dtype  \n","---  ------             --------------  -----  \n"," 0   id                 5110 non-null   int64  \n"," 1   gender             5110 non-null   object \n"," 2   age                5110 non-null   float64\n"," 3   hypertension       5110 non-null   int64  \n"," 4   heart_disease      5110 non-null   int64  \n"," 5   ever_married       5110 non-null   object \n"," 6   work_type          5110 non-null   object \n"," 7   Residence_type     5110 non-null   object \n"," 8   avg_glucose_level  5110 non-null   float64\n"," 9   bmi                5110 non-null   float64\n"," 10  smoking_status     5110 non-null   object \n"," 11  stroke             5110 non-null   int64  \n","dtypes: float64(3), int64(4), object(5)\n","memory usage: 479.2+ KB\n"]}]},{"cell_type":"markdown","source":["1. Gender"],"metadata":{"id":"fRNJJ2gDeHG7"}},{"cell_type":"code","source":["df['gender'].unique()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"qaOMLKD6iVxT","executionInfo":{"status":"ok","timestamp":1730641024865,"user_tz":-330,"elapsed":21,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"d0263fb6-ab23-459c-da01-4ca1531f545d"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['Male', 'Female', 'Other'], dtype=object)"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["df['gender'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":209},"id":"EYHQ2UYGguyP","executionInfo":{"status":"ok","timestamp":1730641024865,"user_tz":-330,"elapsed":19,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"13f8376d-0a1c-4383-d0aa-74eca1cb7831"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["gender\n","Female    2994\n","Male      2115\n","Other        1\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>gender</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Female</th>\n","      <td>2994</td>\n","    </tr>\n","    <tr>\n","      <th>Male</th>\n","      <td>2115</td>\n","    </tr>\n","    <tr>\n","      <th>Other</th>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":17}]},{"cell_type":"markdown","source":["As there is only 1 value present for the OTHER, we will drop that"],"metadata":{"id":"ttfde6SxidLc"}},{"cell_type":"code","source":["df = df.drop(df[df['gender'] == 'Other'].index)"],"metadata":{"id":"VGJe0owsiR9N","executionInfo":{"status":"ok","timestamp":1730641024865,"user_tz":-330,"elapsed":17,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["df.head(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":261},"id":"TNhcBcyBi-He","executionInfo":{"status":"ok","timestamp":1730641025324,"user_tz":-330,"elapsed":19,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"f952c265-574b-452f-a18f-8b8be2c024a2"},"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      id  gender   age  hypertension  heart_disease ever_married  \\\n","0   9046    Male  67.0             0              1          Yes   \n","1  51676  Female  61.0             0              0          Yes   \n","2  31112    Male  80.0             0              1          Yes   \n","3  60182  Female  49.0             0              0          Yes   \n","4   1665  Female  79.0             1              0          Yes   \n","\n","       work_type Residence_type  avg_glucose_level        bmi  \\\n","0        Private          Urban             228.69  36.600000   \n","1  Self-employed          Rural             202.21  28.893237   \n","2        Private          Rural             105.92  32.500000   \n","3        Private          Urban             171.23  34.400000   \n","4  Self-employed          Rural             174.12  24.000000   \n","\n","    smoking_status  stroke  \n","0  formerly smoked       1  \n","1     never smoked       1  \n","2     never smoked       1  \n","3           smokes       1  \n","4     never smoked       1  "],"text/html":["\n","  <div id=\"df-f38d6734-7e8f-4a5d-9ee5-a6e822b62534\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>gender</th>\n","      <th>age</th>\n","      <th>hypertension</th>\n","      <th>heart_disease</th>\n","      <th>ever_married</th>\n","      <th>work_type</th>\n","      <th>Residence_type</th>\n","      <th>avg_glucose_level</th>\n","      <th>bmi</th>\n","      <th>smoking_status</th>\n","      <th>stroke</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>9046</td>\n","      <td>Male</td>\n","      <td>67.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Yes</td>\n","      <td>Private</td>\n","      <td>Urban</td>\n","      <td>228.69</td>\n","      <td>36.600000</td>\n","      <td>formerly smoked</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>51676</td>\n","      <td>Female</td>\n","      <td>61.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Yes</td>\n","      <td>Self-employed</td>\n","      <td>Rural</td>\n","      <td>202.21</td>\n","      <td>28.893237</td>\n","      <td>never smoked</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>31112</td>\n","      <td>Male</td>\n","      <td>80.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Yes</td>\n","      <td>Private</td>\n","      <td>Rural</td>\n","      <td>105.92</td>\n","      <td>32.500000</td>\n","      <td>never smoked</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>60182</td>\n","      <td>Female</td>\n","      <td>49.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Yes</td>\n","      <td>Private</td>\n","      <td>Urban</td>\n","      <td>171.23</td>\n","      <td>34.400000</td>\n","      <td>smokes</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1665</td>\n","      <td>Female</td>\n","      <td>79.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>Yes</td>\n","      <td>Self-employed</td>\n","      <td>Rural</td>\n","      <td>174.12</td>\n","      <td>24.000000</td>\n","      <td>never smoked</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f38d6734-7e8f-4a5d-9ee5-a6e822b62534')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f38d6734-7e8f-4a5d-9ee5-a6e822b62534 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f38d6734-7e8f-4a5d-9ee5-a6e822b62534');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e297abe0-9b66-4d72-b730-e59643fa6ed5\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e297abe0-9b66-4d72-b730-e59643fa6ed5')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e297abe0-9b66-4d72-b730-e59643fa6ed5 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 5109,\n  \"fields\": [\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21162,\n        \"min\": 67,\n        \"max\": 72940,\n        \"num_unique_values\": 5109,\n        \"samples\": [\n          40041,\n          55244,\n          69824\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Female\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22.613575307650937,\n        \"min\": 0.08,\n        \"max\": 82.0,\n        \"num_unique_values\": 104,\n        \"samples\": [\n          45.0,\n          24.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hypertension\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"heart_disease\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ever_married\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"No\",\n          \"Yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"work_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Self-employed\",\n          \"Never_worked\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Residence_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Rural\",\n          \"Urban\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avg_glucose_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 45.2850036657365,\n        \"min\": 55.12,\n        \"max\": 271.74,\n        \"num_unique_values\": 3978,\n        \"samples\": [\n          178.29,\n          105.74\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.6982351236285345,\n        \"min\": 10.3,\n        \"max\": 97.6,\n        \"num_unique_values\": 419,\n        \"samples\": [\n          36.3,\n          17.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoking_status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"never smoked\",\n          \"Unknown\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"stroke\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["df['gender'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":178},"id":"3viwb7VmjAGj","executionInfo":{"status":"ok","timestamp":1730641025324,"user_tz":-330,"elapsed":17,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"6e681740-45e5-476b-fa43-d4da9c7d5240"},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["gender\n","Female    2994\n","Male      2115\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>gender</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Female</th>\n","      <td>2994</td>\n","    </tr>\n","    <tr>\n","      <th>Male</th>\n","      <td>2115</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":20}]},{"cell_type":"markdown","source":["Now replacing the Male as 1 and Female as 0"],"metadata":{"id":"IDVjONt8y8Rx"}},{"cell_type":"code","source":["df['gender'].replace({'Male': 1, 'Female': 0}, inplace = True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"2LD_6YaHqY8A","executionInfo":{"status":"ok","timestamp":1730641025325,"user_tz":-330,"elapsed":16,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"c3bad6d1-bed7-42fb-fe11-c07e82dfdc7a"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-21-a05e76498d29>:1: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df['gender'].replace({'Male': 1, 'Female': 0}, inplace = True)\n","<ipython-input-21-a05e76498d29>:1: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n","  df['gender'].replace({'Male': 1, 'Female': 0}, inplace = True)\n"]}]},{"cell_type":"code","source":["df.head(3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":180},"id":"I5zgIlvLzIiq","executionInfo":{"status":"ok","timestamp":1730641025325,"user_tz":-330,"elapsed":14,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"96543045-d529-46ff-e203-abca9d5b31e3"},"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      id  gender   age  hypertension  heart_disease ever_married  \\\n","0   9046       1  67.0             0              1          Yes   \n","1  51676       0  61.0             0              0          Yes   \n","2  31112       1  80.0             0              1          Yes   \n","\n","       work_type Residence_type  avg_glucose_level        bmi  \\\n","0        Private          Urban             228.69  36.600000   \n","1  Self-employed          Rural             202.21  28.893237   \n","2        Private          Rural             105.92  32.500000   \n","\n","    smoking_status  stroke  \n","0  formerly smoked       1  \n","1     never smoked       1  \n","2     never smoked       1  "],"text/html":["\n","  <div id=\"df-f89f90b0-be11-4565-80c4-ec2d48a4b1a4\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>gender</th>\n","      <th>age</th>\n","      <th>hypertension</th>\n","      <th>heart_disease</th>\n","      <th>ever_married</th>\n","      <th>work_type</th>\n","      <th>Residence_type</th>\n","      <th>avg_glucose_level</th>\n","      <th>bmi</th>\n","      <th>smoking_status</th>\n","      <th>stroke</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>9046</td>\n","      <td>1</td>\n","      <td>67.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Yes</td>\n","      <td>Private</td>\n","      <td>Urban</td>\n","      <td>228.69</td>\n","      <td>36.600000</td>\n","      <td>formerly smoked</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>51676</td>\n","      <td>0</td>\n","      <td>61.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Yes</td>\n","      <td>Self-employed</td>\n","      <td>Rural</td>\n","      <td>202.21</td>\n","      <td>28.893237</td>\n","      <td>never smoked</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>31112</td>\n","      <td>1</td>\n","      <td>80.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Yes</td>\n","      <td>Private</td>\n","      <td>Rural</td>\n","      <td>105.92</td>\n","      <td>32.500000</td>\n","      <td>never smoked</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f89f90b0-be11-4565-80c4-ec2d48a4b1a4')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f89f90b0-be11-4565-80c4-ec2d48a4b1a4 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f89f90b0-be11-4565-80c4-ec2d48a4b1a4');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-a0b531b1-a10c-41ce-a344-c7a719569f55\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a0b531b1-a10c-41ce-a344-c7a719569f55')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-a0b531b1-a10c-41ce-a344-c7a719569f55 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 5109,\n  \"fields\": [\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21162,\n        \"min\": 67,\n        \"max\": 72940,\n        \"num_unique_values\": 5109,\n        \"samples\": [\n          40041,\n          55244,\n          69824\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22.613575307650937,\n        \"min\": 0.08,\n        \"max\": 82.0,\n        \"num_unique_values\": 104,\n        \"samples\": [\n          45.0,\n          24.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hypertension\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"heart_disease\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ever_married\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"No\",\n          \"Yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"work_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Self-employed\",\n          \"Never_worked\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Residence_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Rural\",\n          \"Urban\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avg_glucose_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 45.2850036657365,\n        \"min\": 55.12,\n        \"max\": 271.74,\n        \"num_unique_values\": 3978,\n        \"samples\": [\n          178.29,\n          105.74\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.6982351236285345,\n        \"min\": 10.3,\n        \"max\": 97.6,\n        \"num_unique_values\": 419,\n        \"samples\": [\n          36.3,\n          17.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoking_status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"never smoked\",\n          \"Unknown\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"stroke\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":22}]},{"cell_type":"markdown","source":["2. Ever_married"],"metadata":{"id":"NkOFSL2XzokC"}},{"cell_type":"code","source":["df['ever_married'].unique()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"Cel6bLs9zLbT","executionInfo":{"status":"ok","timestamp":1730641025325,"user_tz":-330,"elapsed":12,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"d34dd49d-9cd5-4aeb-d8d1-5bfb668706f3"},"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['Yes', 'No'], dtype=object)"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["df['ever_married'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":178},"id":"AUUxLWzAzyDq","executionInfo":{"status":"ok","timestamp":1730641025817,"user_tz":-330,"elapsed":502,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"c5687354-d236-48ca-d4ad-72358542dcb0"},"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["ever_married\n","Yes    3353\n","No     1756\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>ever_married</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Yes</th>\n","      <td>3353</td>\n","    </tr>\n","    <tr>\n","      <th>No</th>\n","      <td>1756</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":24}]},{"cell_type":"markdown","source":["Replacing Yes as 1 and No and 0"],"metadata":{"id":"6VVG97Mlz3is"}},{"cell_type":"code","source":["df['ever_married'].replace({'Yes' : 1, 'No' : 0}, inplace = True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"9tPSHCMKz17q","executionInfo":{"status":"ok","timestamp":1730641025817,"user_tz":-330,"elapsed":27,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"0c7b8f1c-5154-4858-dfcc-2e78b146c298"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-25-8391b8ec88f2>:1: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df['ever_married'].replace({'Yes' : 1, 'No' : 0}, inplace = True)\n","<ipython-input-25-8391b8ec88f2>:1: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n","  df['ever_married'].replace({'Yes' : 1, 'No' : 0}, inplace = True)\n"]}]},{"cell_type":"code","source":["df.head(3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":180},"id":"1mpAAqOD0IAw","executionInfo":{"status":"ok","timestamp":1730641025817,"user_tz":-330,"elapsed":24,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"c84b835c-32f9-4292-830e-df02885126d2"},"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      id  gender   age  hypertension  heart_disease  ever_married  \\\n","0   9046       1  67.0             0              1             1   \n","1  51676       0  61.0             0              0             1   \n","2  31112       1  80.0             0              1             1   \n","\n","       work_type Residence_type  avg_glucose_level        bmi  \\\n","0        Private          Urban             228.69  36.600000   \n","1  Self-employed          Rural             202.21  28.893237   \n","2        Private          Rural             105.92  32.500000   \n","\n","    smoking_status  stroke  \n","0  formerly smoked       1  \n","1     never smoked       1  \n","2     never smoked       1  "],"text/html":["\n","  <div id=\"df-3c7a4fed-8549-4699-b07b-90659d4bd5f5\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>gender</th>\n","      <th>age</th>\n","      <th>hypertension</th>\n","      <th>heart_disease</th>\n","      <th>ever_married</th>\n","      <th>work_type</th>\n","      <th>Residence_type</th>\n","      <th>avg_glucose_level</th>\n","      <th>bmi</th>\n","      <th>smoking_status</th>\n","      <th>stroke</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>9046</td>\n","      <td>1</td>\n","      <td>67.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Private</td>\n","      <td>Urban</td>\n","      <td>228.69</td>\n","      <td>36.600000</td>\n","      <td>formerly smoked</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>51676</td>\n","      <td>0</td>\n","      <td>61.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Self-employed</td>\n","      <td>Rural</td>\n","      <td>202.21</td>\n","      <td>28.893237</td>\n","      <td>never smoked</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>31112</td>\n","      <td>1</td>\n","      <td>80.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Private</td>\n","      <td>Rural</td>\n","      <td>105.92</td>\n","      <td>32.500000</td>\n","      <td>never smoked</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3c7a4fed-8549-4699-b07b-90659d4bd5f5')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-3c7a4fed-8549-4699-b07b-90659d4bd5f5 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-3c7a4fed-8549-4699-b07b-90659d4bd5f5');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-d32ede98-614f-4741-bf3d-c402c670e290\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d32ede98-614f-4741-bf3d-c402c670e290')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-d32ede98-614f-4741-bf3d-c402c670e290 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 5109,\n  \"fields\": [\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21162,\n        \"min\": 67,\n        \"max\": 72940,\n        \"num_unique_values\": 5109,\n        \"samples\": [\n          40041,\n          55244,\n          69824\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22.613575307650937,\n        \"min\": 0.08,\n        \"max\": 82.0,\n        \"num_unique_values\": 104,\n        \"samples\": [\n          45.0,\n          24.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hypertension\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"heart_disease\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ever_married\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"work_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Self-employed\",\n          \"Never_worked\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Residence_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Rural\",\n          \"Urban\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avg_glucose_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 45.2850036657365,\n        \"min\": 55.12,\n        \"max\": 271.74,\n        \"num_unique_values\": 3978,\n        \"samples\": [\n          178.29,\n          105.74\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.6982351236285345,\n        \"min\": 10.3,\n        \"max\": 97.6,\n        \"num_unique_values\": 419,\n        \"samples\": [\n          36.3,\n          17.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoking_status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"never smoked\",\n          \"Unknown\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"stroke\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":26}]},{"cell_type":"markdown","source":["3. Work Type"],"metadata":{"id":"pgamTFbZ0afl"}},{"cell_type":"code","source":["df['work_type'].unique()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"LEjb0N2J0KiG","executionInfo":{"status":"ok","timestamp":1730641025817,"user_tz":-330,"elapsed":22,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"47fa0f63-34b6-4311-8dcd-d78fd678ac75"},"execution_count":27,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['Private', 'Self-employed', 'Govt_job', 'children', 'Never_worked'],\n","      dtype=object)"]},"metadata":{},"execution_count":27}]},{"cell_type":"code","source":["df['work_type'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":272},"id":"j5CoJolO0eca","executionInfo":{"status":"ok","timestamp":1730641025817,"user_tz":-330,"elapsed":18,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"04c5914e-ac65-4a50-a3c5-9aabb96f73de"},"execution_count":28,"outputs":[{"output_type":"execute_result","data":{"text/plain":["work_type\n","Private          2924\n","Self-employed     819\n","children          687\n","Govt_job          657\n","Never_worked       22\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>work_type</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Private</th>\n","      <td>2924</td>\n","    </tr>\n","    <tr>\n","      <th>Self-employed</th>\n","      <td>819</td>\n","    </tr>\n","    <tr>\n","      <th>children</th>\n","      <td>687</td>\n","    </tr>\n","    <tr>\n","      <th>Govt_job</th>\n","      <td>657</td>\n","    </tr>\n","    <tr>\n","      <th>Never_worked</th>\n","      <td>22</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":28}]},{"cell_type":"markdown","source":["4. Residence type"],"metadata":{"id":"TuG7Ov3U0qM0"}},{"cell_type":"code","source":["df['Residence_type'].unique()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"Or4Xqrgr0k91","executionInfo":{"status":"ok","timestamp":1730641025818,"user_tz":-330,"elapsed":18,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"c9ee674e-e200-4237-a8ea-2ba84ef684d1"},"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['Urban', 'Rural'], dtype=object)"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["df['Residence_type'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":178},"id":"huaseyiD0vfA","executionInfo":{"status":"ok","timestamp":1730641025818,"user_tz":-330,"elapsed":15,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"ec833d65-e6f7-43ac-aa84-193eccf994e9"},"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Residence_type\n","Urban    2596\n","Rural    2513\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>Residence_type</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Urban</th>\n","      <td>2596</td>\n","    </tr>\n","    <tr>\n","      <th>Rural</th>\n","      <td>2513</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":30}]},{"cell_type":"code","source":["df['Residence_type'].replace({'Urban' : 1, 'Rural' : 0}, inplace = True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"dVpDuS2X06oE","executionInfo":{"status":"ok","timestamp":1730641026317,"user_tz":-330,"elapsed":513,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"6b796dcd-9086-4478-d7dd-adce76ec9454"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-31-fadd75f3552d>:1: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df['Residence_type'].replace({'Urban' : 1, 'Rural' : 0}, inplace = True)\n","<ipython-input-31-fadd75f3552d>:1: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n","  df['Residence_type'].replace({'Urban' : 1, 'Rural' : 0}, inplace = True)\n"]}]},{"cell_type":"code","source":["df.head(3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":180},"id":"rTXYR1-b1C4j","executionInfo":{"status":"ok","timestamp":1730641026318,"user_tz":-330,"elapsed":32,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"5738cad9-5b4c-4e0a-e88a-0fc1f5f23508"},"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      id  gender   age  hypertension  heart_disease  ever_married  \\\n","0   9046       1  67.0             0              1             1   \n","1  51676       0  61.0             0              0             1   \n","2  31112       1  80.0             0              1             1   \n","\n","       work_type  Residence_type  avg_glucose_level        bmi  \\\n","0        Private               1             228.69  36.600000   \n","1  Self-employed               0             202.21  28.893237   \n","2        Private               0             105.92  32.500000   \n","\n","    smoking_status  stroke  \n","0  formerly smoked       1  \n","1     never smoked       1  \n","2     never smoked       1  "],"text/html":["\n","  <div id=\"df-95e57dec-3922-4ae6-80dd-6d47de23a81f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>gender</th>\n","      <th>age</th>\n","      <th>hypertension</th>\n","      <th>heart_disease</th>\n","      <th>ever_married</th>\n","      <th>work_type</th>\n","      <th>Residence_type</th>\n","      <th>avg_glucose_level</th>\n","      <th>bmi</th>\n","      <th>smoking_status</th>\n","      <th>stroke</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>9046</td>\n","      <td>1</td>\n","      <td>67.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Private</td>\n","      <td>1</td>\n","      <td>228.69</td>\n","      <td>36.600000</td>\n","      <td>formerly smoked</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>51676</td>\n","      <td>0</td>\n","      <td>61.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Self-employed</td>\n","      <td>0</td>\n","      <td>202.21</td>\n","      <td>28.893237</td>\n","      <td>never smoked</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>31112</td>\n","      <td>1</td>\n","      <td>80.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Private</td>\n","      <td>0</td>\n","      <td>105.92</td>\n","      <td>32.500000</td>\n","      <td>never smoked</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-95e57dec-3922-4ae6-80dd-6d47de23a81f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-95e57dec-3922-4ae6-80dd-6d47de23a81f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-95e57dec-3922-4ae6-80dd-6d47de23a81f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-5cf82b6c-189b-40c6-8b36-682f720bbaaa\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5cf82b6c-189b-40c6-8b36-682f720bbaaa')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-5cf82b6c-189b-40c6-8b36-682f720bbaaa button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 5109,\n  \"fields\": [\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21162,\n        \"min\": 67,\n        \"max\": 72940,\n        \"num_unique_values\": 5109,\n        \"samples\": [\n          40041,\n          55244,\n          69824\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22.613575307650937,\n        \"min\": 0.08,\n        \"max\": 82.0,\n        \"num_unique_values\": 104,\n        \"samples\": [\n          45.0,\n          24.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hypertension\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"heart_disease\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ever_married\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"work_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Self-employed\",\n          \"Never_worked\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Residence_type\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avg_glucose_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 45.2850036657365,\n        \"min\": 55.12,\n        \"max\": 271.74,\n        \"num_unique_values\": 3978,\n        \"samples\": [\n          178.29,\n          105.74\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.6982351236285345,\n        \"min\": 10.3,\n        \"max\": 97.6,\n        \"num_unique_values\": 419,\n        \"samples\": [\n          36.3,\n          17.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoking_status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"never smoked\",\n          \"Unknown\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"stroke\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":32}]},{"cell_type":"markdown","source":["5. Smoking status"],"metadata":{"id":"D8pOfYtX1Iax"}},{"cell_type":"code","source":["df['smoking_status'].unique()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"cXhjO8sA1HrQ","executionInfo":{"status":"ok","timestamp":1730641026318,"user_tz":-330,"elapsed":30,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"3e6d8085-a77f-4050-959f-aa125a8f55e3"},"execution_count":33,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['formerly smoked', 'never smoked', 'smokes', 'Unknown'],\n","      dtype=object)"]},"metadata":{},"execution_count":33}]},{"cell_type":"code","source":["df['smoking_status'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":241},"id":"DSge9h511EeR","executionInfo":{"status":"ok","timestamp":1730641026318,"user_tz":-330,"elapsed":26,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"0aa7efd4-f7a9-4f69-bac2-7c6c31dfdd6a"},"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/plain":["smoking_status\n","never smoked       1892\n","Unknown            1544\n","formerly smoked     884\n","smokes              789\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>smoking_status</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>never smoked</th>\n","      <td>1892</td>\n","    </tr>\n","    <tr>\n","      <th>Unknown</th>\n","      <td>1544</td>\n","    </tr>\n","    <tr>\n","      <th>formerly smoked</th>\n","      <td>884</td>\n","    </tr>\n","    <tr>\n","      <th>smokes</th>\n","      <td>789</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":34}]},{"cell_type":"markdown","source":["6. ID"],"metadata":{"id":"j9SQNunQzhH0"}},{"cell_type":"markdown","source":["I will drop this feature as it has no impact on my target feature."],"metadata":{"id":"Q5l-rgDFzr0K"}},{"cell_type":"code","source":["df.drop('id', axis = 1, inplace = True)"],"metadata":{"id":"ntO1wyxizx0n","executionInfo":{"status":"ok","timestamp":1730641026318,"user_tz":-330,"elapsed":24,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}}},"execution_count":35,"outputs":[]},{"cell_type":"code","source":["df.head(3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":143},"id":"LvKOuIRkzyKD","executionInfo":{"status":"ok","timestamp":1730641026319,"user_tz":-330,"elapsed":25,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"345e9f0f-f209-4989-f6fd-4e5fb70b44d3"},"execution_count":36,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   gender   age  hypertension  heart_disease  ever_married      work_type  \\\n","0       1  67.0             0              1             1        Private   \n","1       0  61.0             0              0             1  Self-employed   \n","2       1  80.0             0              1             1        Private   \n","\n","   Residence_type  avg_glucose_level        bmi   smoking_status  stroke  \n","0               1             228.69  36.600000  formerly smoked       1  \n","1               0             202.21  28.893237     never smoked       1  \n","2               0             105.92  32.500000     never smoked       1  "],"text/html":["\n","  <div id=\"df-babb3b28-9110-4c93-8245-6a8462f9e897\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>gender</th>\n","      <th>age</th>\n","      <th>hypertension</th>\n","      <th>heart_disease</th>\n","      <th>ever_married</th>\n","      <th>work_type</th>\n","      <th>Residence_type</th>\n","      <th>avg_glucose_level</th>\n","      <th>bmi</th>\n","      <th>smoking_status</th>\n","      <th>stroke</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>67.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Private</td>\n","      <td>1</td>\n","      <td>228.69</td>\n","      <td>36.600000</td>\n","      <td>formerly smoked</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>61.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Self-employed</td>\n","      <td>0</td>\n","      <td>202.21</td>\n","      <td>28.893237</td>\n","      <td>never smoked</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>80.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Private</td>\n","      <td>0</td>\n","      <td>105.92</td>\n","      <td>32.500000</td>\n","      <td>never smoked</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-babb3b28-9110-4c93-8245-6a8462f9e897')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-babb3b28-9110-4c93-8245-6a8462f9e897 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-babb3b28-9110-4c93-8245-6a8462f9e897');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-45890092-8aa0-4c9b-bb12-2ad0c09494b6\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-45890092-8aa0-4c9b-bb12-2ad0c09494b6')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-45890092-8aa0-4c9b-bb12-2ad0c09494b6 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 5109,\n  \"fields\": [\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22.613575307650937,\n        \"min\": 0.08,\n        \"max\": 82.0,\n        \"num_unique_values\": 104,\n        \"samples\": [\n          45.0,\n          24.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hypertension\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"heart_disease\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ever_married\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"work_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Self-employed\",\n          \"Never_worked\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Residence_type\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avg_glucose_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 45.2850036657365,\n        \"min\": 55.12,\n        \"max\": 271.74,\n        \"num_unique_values\": 3978,\n        \"samples\": [\n          178.29,\n          105.74\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.6982351236285345,\n        \"min\": 10.3,\n        \"max\": 97.6,\n        \"num_unique_values\": 419,\n        \"samples\": [\n          36.3,\n          17.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoking_status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"never smoked\",\n          \"Unknown\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"stroke\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":36}]},{"cell_type":"code","source":["df.dtypes"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":429},"id":"j3XhqI_-1WDf","executionInfo":{"status":"ok","timestamp":1730641026319,"user_tz":-330,"elapsed":24,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"14fa7764-d62a-4b87-e370-3c36d4a993f8"},"execution_count":37,"outputs":[{"output_type":"execute_result","data":{"text/plain":["gender                 int64\n","age                  float64\n","hypertension           int64\n","heart_disease          int64\n","ever_married           int64\n","work_type             object\n","Residence_type         int64\n","avg_glucose_level    float64\n","bmi                  float64\n","smoking_status        object\n","stroke                 int64\n","dtype: object"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>gender</th>\n","      <td>int64</td>\n","    </tr>\n","    <tr>\n","      <th>age</th>\n","      <td>float64</td>\n","    </tr>\n","    <tr>\n","      <th>hypertension</th>\n","      <td>int64</td>\n","    </tr>\n","    <tr>\n","      <th>heart_disease</th>\n","      <td>int64</td>\n","    </tr>\n","    <tr>\n","      <th>ever_married</th>\n","      <td>int64</td>\n","    </tr>\n","    <tr>\n","      <th>work_type</th>\n","      <td>object</td>\n","    </tr>\n","    <tr>\n","      <th>Residence_type</th>\n","      <td>int64</td>\n","    </tr>\n","    <tr>\n","      <th>avg_glucose_level</th>\n","      <td>float64</td>\n","    </tr>\n","    <tr>\n","      <th>bmi</th>\n","      <td>float64</td>\n","    </tr>\n","    <tr>\n","      <th>smoking_status</th>\n","      <td>object</td>\n","    </tr>\n","    <tr>\n","      <th>stroke</th>\n","      <td>int64</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> object</label>"]},"metadata":{},"execution_count":37}]},{"cell_type":"markdown","source":["Target Column (Stroke)\n","Our target column consist of 0 and 1 which result to Binary Classification Problem"],"metadata":{"id":"2AF52KMSVIf8"}},{"cell_type":"code","source":["df['stroke'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":178},"id":"wodeH3KWUruu","executionInfo":{"status":"ok","timestamp":1730641026319,"user_tz":-330,"elapsed":22,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"eb59c955-e03f-4c7b-9a8c-1c3dc1a383aa"},"execution_count":38,"outputs":[{"output_type":"execute_result","data":{"text/plain":["stroke\n","0    4860\n","1     249\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>stroke</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4860</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>249</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":38}]},{"cell_type":"code","source":["df['stroke'].value_counts(normalize = True) * 100"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":178},"id":"4L8klzNRVP2E","executionInfo":{"status":"ok","timestamp":1730641026319,"user_tz":-330,"elapsed":21,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"ee958ae5-344e-408e-84c0-18f386aa8482"},"execution_count":39,"outputs":[{"output_type":"execute_result","data":{"text/plain":["stroke\n","0    95.126248\n","1     4.873752\n","Name: proportion, dtype: float64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>proportion</th>\n","    </tr>\n","    <tr>\n","      <th>stroke</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>95.126248</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4.873752</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> float64</label>"]},"metadata":{},"execution_count":39}]},{"cell_type":"markdown","source":["The dataset is in imbalance form as the proportion of not having stroke is 95% whreas the proportion of having stroke is only 5%. Hence we need to fix this."],"metadata":{"id":"KcWEAbGUVrR5"}},{"cell_type":"code","source":["stroke_counts = df['stroke'].value_counts()\n","sns.barplot(x=stroke_counts.index, y=stroke_counts.values)"],"metadata":{"id":"Kc3f0MypVTZV","executionInfo":{"status":"ok","timestamp":1730641027744,"user_tz":-330,"elapsed":1445,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"colab":{"base_uri":"https://localhost:8080/","height":466},"outputId":"b43c12e3-c58a-461d-f6da-c760d74aaa93"},"execution_count":40,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: xlabel='stroke'>"]},"metadata":{},"execution_count":40},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["We will use ROC metric to fix the imbalance traget column dataset."],"metadata":{"id":"wYmKJrIvYCZC"}},{"cell_type":"code","source":[" sns.histplot(x = df['age'], kde = True)"],"metadata":{"id":"LcnnuTAoVdZC","colab":{"base_uri":"https://localhost:8080/","height":466},"executionInfo":{"status":"ok","timestamp":1730641029815,"user_tz":-330,"elapsed":2077,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"7a766d7b-c361-4b78-ac92-f2d43ccba10c"},"execution_count":41,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: xlabel='age', ylabel='Count'>"]},"metadata":{},"execution_count":41},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":[" gender_counts = df['gender'].value_counts()\n"," sns.barplot(x=gender_counts.index, y=gender_counts.values)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":466},"id":"01OELosjZlCA","executionInfo":{"status":"ok","timestamp":1730641029815,"user_tz":-330,"elapsed":26,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"4d1fbf43-990d-477e-c6a3-e6cc24851e2d"},"execution_count":42,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: xlabel='gender'>"]},"metadata":{},"execution_count":42},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["Male are having higher chances of getting stroke as compared to female"],"metadata":{"id":"Fik30WMafa_J"}},{"cell_type":"markdown","source":["Dividing the data as per categorical and numerical features"],"metadata":{"id":"1tUtXfABd1qM"}},{"cell_type":"code","source":["categorical_features = [x for x in df.columns if df[x].dtypes == 'O']"],"metadata":{"id":"_bJA3gCMiZne","executionInfo":{"status":"ok","timestamp":1730641029815,"user_tz":-330,"elapsed":20,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}}},"execution_count":43,"outputs":[]},{"cell_type":"code","source":["categorical_features"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1730641029815,"user_tz":-330,"elapsed":19,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"bd1c56ea-d04a-42b9-adb1-2ee60975d570","id":"X-4N64MciZnf"},"execution_count":44,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['work_type', 'smoking_status']"]},"metadata":{},"execution_count":44}]},{"cell_type":"code","source":["numerical_features = [x for x in df.columns if df[x].dtypes != 'O']"],"metadata":{"id":"teOFJTiQiZng","executionInfo":{"status":"ok","timestamp":1730641029816,"user_tz":-330,"elapsed":16,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}}},"execution_count":45,"outputs":[]},{"cell_type":"code","source":["numerical_features"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1730641029835,"user_tz":-330,"elapsed":34,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"634cb93e-b42e-4bdc-8769-b96d142cf6c1","id":"73Eretp0iZnh"},"execution_count":46,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['gender',\n"," 'age',\n"," 'hypertension',\n"," 'heart_disease',\n"," 'ever_married',\n"," 'Residence_type',\n"," 'avg_glucose_level',\n"," 'bmi',\n"," 'stroke']"]},"metadata":{},"execution_count":46}]},{"cell_type":"markdown","source":["Checking the correlation between the dependent and independent variables"],"metadata":{"id":"C-stdaXYh3E2"}},{"cell_type":"code","source":["df[numerical_features + ['stroke']].corr()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"id":"L-D6pFaQersH","executionInfo":{"status":"ok","timestamp":1730641030547,"user_tz":-330,"elapsed":743,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"78e75f9e-1bd5-4bdd-acd5-b537be5c4773"},"execution_count":47,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                     gender       age  hypertension  heart_disease  \\\n","gender             1.000000 -0.027752      0.021223       0.085685   \n","age               -0.027752  1.000000      0.276367       0.263777   \n","hypertension       0.021223  0.276367      1.000000       0.108292   \n","heart_disease      0.085685  0.263777      0.108292       1.000000   \n","ever_married      -0.030171  0.679084      0.164187       0.114601   \n","Residence_type    -0.006105  0.014031     -0.007980       0.003045   \n","avg_glucose_level  0.054722  0.238323      0.174540       0.161907   \n","bmi               -0.025606  0.325858      0.160147       0.038862   \n","stroke             0.009081  0.245239      0.127891       0.134905   \n","stroke             0.009081  0.245239      0.127891       0.134905   \n","\n","                   ever_married  Residence_type  avg_glucose_level       bmi  \\\n","gender                -0.030171       -0.006105           0.054722 -0.025606   \n","age                    0.679084        0.014031           0.238323  0.325858   \n","hypertension           0.164187       -0.007980           0.174540  0.160147   \n","heart_disease          0.114601        0.003045           0.161907  0.038862   \n","ever_married           1.000000        0.005988           0.155329  0.335563   \n","Residence_type         0.005988        1.000000          -0.004783 -0.000288   \n","avg_glucose_level      0.155329       -0.004783           1.000000  0.168910   \n","bmi                    0.335563       -0.000288           0.168910  1.000000   \n","stroke                 0.108299        0.015415           0.131991  0.038912   \n","stroke                 0.108299        0.015415           0.131991  0.038912   \n","\n","                     stroke    stroke  \n","gender             0.009081  0.009081  \n","age                0.245239  0.245239  \n","hypertension       0.127891  0.127891  \n","heart_disease      0.134905  0.134905  \n","ever_married       0.108299  0.108299  \n","Residence_type     0.015415  0.015415  \n","avg_glucose_level  0.131991  0.131991  \n","bmi                0.038912  0.038912  \n","stroke             1.000000  1.000000  \n","stroke             1.000000  1.000000  "],"text/html":["\n","  <div id=\"df-a02e3291-88b5-4ca8-8f22-52462c3ee7ac\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>gender</th>\n","      <th>age</th>\n","      <th>hypertension</th>\n","      <th>heart_disease</th>\n","      <th>ever_married</th>\n","      <th>Residence_type</th>\n","      <th>avg_glucose_level</th>\n","      <th>bmi</th>\n","      <th>stroke</th>\n","      <th>stroke</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>gender</th>\n","      <td>1.000000</td>\n","      <td>-0.027752</td>\n","      <td>0.021223</td>\n","      <td>0.085685</td>\n","      <td>-0.030171</td>\n","      <td>-0.006105</td>\n","      <td>0.054722</td>\n","      <td>-0.025606</td>\n","      <td>0.009081</td>\n","      <td>0.009081</td>\n","    </tr>\n","    <tr>\n","      <th>age</th>\n","      <td>-0.027752</td>\n","      <td>1.000000</td>\n","      <td>0.276367</td>\n","      <td>0.263777</td>\n","      <td>0.679084</td>\n","      <td>0.014031</td>\n","      <td>0.238323</td>\n","      <td>0.325858</td>\n","      <td>0.245239</td>\n","      <td>0.245239</td>\n","    </tr>\n","    <tr>\n","      <th>hypertension</th>\n","      <td>0.021223</td>\n","      <td>0.276367</td>\n","      <td>1.000000</td>\n","      <td>0.108292</td>\n","      <td>0.164187</td>\n","      <td>-0.007980</td>\n","      <td>0.174540</td>\n","      <td>0.160147</td>\n","      <td>0.127891</td>\n","      <td>0.127891</td>\n","    </tr>\n","    <tr>\n","      <th>heart_disease</th>\n","      <td>0.085685</td>\n","      <td>0.263777</td>\n","      <td>0.108292</td>\n","      <td>1.000000</td>\n","      <td>0.114601</td>\n","      <td>0.003045</td>\n","      <td>0.161907</td>\n","      <td>0.038862</td>\n","      <td>0.134905</td>\n","      <td>0.134905</td>\n","    </tr>\n","    <tr>\n","      <th>ever_married</th>\n","      <td>-0.030171</td>\n","      <td>0.679084</td>\n","      <td>0.164187</td>\n","      <td>0.114601</td>\n","      <td>1.000000</td>\n","      <td>0.005988</td>\n","      <td>0.155329</td>\n","      <td>0.335563</td>\n","      <td>0.108299</td>\n","      <td>0.108299</td>\n","    </tr>\n","    <tr>\n","      <th>Residence_type</th>\n","      <td>-0.006105</td>\n","      <td>0.014031</td>\n","      <td>-0.007980</td>\n","      <td>0.003045</td>\n","      <td>0.005988</td>\n","      <td>1.000000</td>\n","      <td>-0.004783</td>\n","      <td>-0.000288</td>\n","      <td>0.015415</td>\n","      <td>0.015415</td>\n","    </tr>\n","    <tr>\n","      <th>avg_glucose_level</th>\n","      <td>0.054722</td>\n","      <td>0.238323</td>\n","      <td>0.174540</td>\n","      <td>0.161907</td>\n","      <td>0.155329</td>\n","      <td>-0.004783</td>\n","      <td>1.000000</td>\n","      <td>0.168910</td>\n","      <td>0.131991</td>\n","      <td>0.131991</td>\n","    </tr>\n","    <tr>\n","      <th>bmi</th>\n","      <td>-0.025606</td>\n","      <td>0.325858</td>\n","      <td>0.160147</td>\n","      <td>0.038862</td>\n","      <td>0.335563</td>\n","      <td>-0.000288</td>\n","      <td>0.168910</td>\n","      <td>1.000000</td>\n","      <td>0.038912</td>\n","      <td>0.038912</td>\n","    </tr>\n","    <tr>\n","      <th>stroke</th>\n","      <td>0.009081</td>\n","      <td>0.245239</td>\n","      <td>0.127891</td>\n","      <td>0.134905</td>\n","      <td>0.108299</td>\n","      <td>0.015415</td>\n","      <td>0.131991</td>\n","      <td>0.038912</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>stroke</th>\n","      <td>0.009081</td>\n","      <td>0.245239</td>\n","      <td>0.127891</td>\n","      <td>0.134905</td>\n","      <td>0.108299</td>\n","      <td>0.015415</td>\n","      <td>0.131991</td>\n","      <td>0.038912</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a02e3291-88b5-4ca8-8f22-52462c3ee7ac')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a02e3291-88b5-4ca8-8f22-52462c3ee7ac button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a02e3291-88b5-4ca8-8f22-52462c3ee7ac');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-50cd57d4-74f9-4d22-852b-99a4bd292c45\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-50cd57d4-74f9-4d22-852b-99a4bd292c45')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-50cd57d4-74f9-4d22-852b-99a4bd292c45 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df[numerical_features + ['stroke']]\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.31525665640174083,\n        \"min\": -0.030171240287543567,\n        \"max\": 1.0,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          -0.025605953739696184,\n          -0.027751796667792778,\n          -0.006104725242495333\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3034023709966402,\n        \"min\": -0.027751796667792778,\n        \"max\": 1.0,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          0.32585787906380564,\n          1.0,\n          0.014030684858404342\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hypertension\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.28694752927416317,\n        \"min\": -0.007979704054028439,\n        \"max\": 1.0,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          0.16014743216910995,\n          0.27636724528520995,\n          -0.007979704054028439\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"heart_disease\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2881569436584525,\n        \"min\": 0.003044819299846203,\n        \"max\": 1.0,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          0.038862184619894276,\n          0.263776741401963,\n          0.003044819299846203\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ever_married\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.32741352401007756,\n        \"min\": -0.030171240287543567,\n        \"max\": 1.0,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          0.33556301869463,\n          0.679084406866617,\n          0.005987906857483101\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Residence_type\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.31513189573935946,\n        \"min\": -0.007979704054028439,\n        \"max\": 1.0,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          -0.0002878481097769146,\n          0.014030684858404342,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avg_glucose_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.28171858430689717,\n        \"min\": -0.004783118494770098,\n        \"max\": 1.0,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          0.16890985190584232,\n          0.2383228408901719,\n          -0.004783118494770098\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.306410968454272,\n        \"min\": -0.025605953739696184,\n        \"max\": 1.0,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          1.0,\n          0.32585787906380564,\n          -0.0002878481097769146\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"stroke\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.385154818608897,\n        \"min\": 0.009080600160079109,\n        \"max\": 1.0,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          0.03891213142912929,\n          0.24523875623198196,\n          0.01541458421031564\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"stroke\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.385154818608897,\n        \"min\": 0.009080600160079109,\n        \"max\": 1.0,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          0.03891213142912929,\n          0.24523875623198196,\n          0.01541458421031564\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":47}]},{"cell_type":"code","source":["sns.heatmap(df[numerical_features + ['stroke']].corr(), annot = True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"wc5_Yh2BiQVZ","executionInfo":{"status":"ok","timestamp":1730641032215,"user_tz":-330,"elapsed":1677,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"15ac43bf-ed2a-4584-bac0-2af7d93ef9d0"},"execution_count":48,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: >"]},"metadata":{},"execution_count":48},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["There is no features which are hiving higher correlation with our target column."],"metadata":{"id":"W8c9mDbgjeTT"}},{"cell_type":"code","source":["numerical_features"],"metadata":{"id":"-y_PkjP0iQYE","colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1730641032215,"user_tz":-330,"elapsed":59,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"1964ead2-0cc7-4abe-9cd3-1e23c58ddf00"},"execution_count":49,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['gender',\n"," 'age',\n"," 'hypertension',\n"," 'heart_disease',\n"," 'ever_married',\n"," 'Residence_type',\n"," 'avg_glucose_level',\n"," 'bmi',\n"," 'stroke']"]},"metadata":{},"execution_count":49}]},{"cell_type":"code","source":["categorical_features"],"metadata":{"id":"3WPCadvjiQaz","colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1730641032216,"user_tz":-330,"elapsed":51,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"ef9faabe-3a97-4fd2-9833-dea596e79003"},"execution_count":50,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['work_type', 'smoking_status']"]},"metadata":{},"execution_count":50}]},{"cell_type":"code","source":["df.head(3)"],"metadata":{"id":"xC76N2L0iQd3","colab":{"base_uri":"https://localhost:8080/","height":143},"executionInfo":{"status":"ok","timestamp":1730641032216,"user_tz":-330,"elapsed":45,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"6c44a6f1-9372-441b-98e8-c193cc0f7149"},"execution_count":51,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   gender   age  hypertension  heart_disease  ever_married      work_type  \\\n","0       1  67.0             0              1             1        Private   \n","1       0  61.0             0              0             1  Self-employed   \n","2       1  80.0             0              1             1        Private   \n","\n","   Residence_type  avg_glucose_level        bmi   smoking_status  stroke  \n","0               1             228.69  36.600000  formerly smoked       1  \n","1               0             202.21  28.893237     never smoked       1  \n","2               0             105.92  32.500000     never smoked       1  "],"text/html":["\n","  <div id=\"df-3bc3a65f-c8d1-4c53-822e-6a00a3dea2c5\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>gender</th>\n","      <th>age</th>\n","      <th>hypertension</th>\n","      <th>heart_disease</th>\n","      <th>ever_married</th>\n","      <th>work_type</th>\n","      <th>Residence_type</th>\n","      <th>avg_glucose_level</th>\n","      <th>bmi</th>\n","      <th>smoking_status</th>\n","      <th>stroke</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>67.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Private</td>\n","      <td>1</td>\n","      <td>228.69</td>\n","      <td>36.600000</td>\n","      <td>formerly smoked</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>61.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>Self-employed</td>\n","      <td>0</td>\n","      <td>202.21</td>\n","      <td>28.893237</td>\n","      <td>never smoked</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>80.0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Private</td>\n","      <td>0</td>\n","      <td>105.92</td>\n","      <td>32.500000</td>\n","      <td>never smoked</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3bc3a65f-c8d1-4c53-822e-6a00a3dea2c5')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-3bc3a65f-c8d1-4c53-822e-6a00a3dea2c5 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-3bc3a65f-c8d1-4c53-822e-6a00a3dea2c5');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-1f69df85-6899-4c31-bcc2-7c9279fc12b2\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1f69df85-6899-4c31-bcc2-7c9279fc12b2')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-1f69df85-6899-4c31-bcc2-7c9279fc12b2 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 5109,\n  \"fields\": [\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22.613575307650937,\n        \"min\": 0.08,\n        \"max\": 82.0,\n        \"num_unique_values\": 104,\n        \"samples\": [\n          45.0,\n          24.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hypertension\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"heart_disease\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ever_married\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"work_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Self-employed\",\n          \"Never_worked\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Residence_type\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avg_glucose_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 45.2850036657365,\n        \"min\": 55.12,\n        \"max\": 271.74,\n        \"num_unique_values\": 3978,\n        \"samples\": [\n          178.29,\n          105.74\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.6982351236285345,\n        \"min\": 10.3,\n        \"max\": 97.6,\n        \"num_unique_values\": 419,\n        \"samples\": [\n          36.3,\n          17.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoking_status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"never smoked\",\n          \"Unknown\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"stroke\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":51}]},{"cell_type":"code","source":["df['bmi'].shape"],"metadata":{"id":"9gJGy3-biQgu","colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"status":"ok","timestamp":1730641032216,"user_tz":-330,"elapsed":43,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"fa7efff7-3ca4-46ea-db43-2516dc111629"},"execution_count":52,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(5109,)"]},"metadata":{},"execution_count":52}]},{"cell_type":"markdown","source":["Converting my categorical columns to numerical columns"],"metadata":{"id":"O2tw0cuq3zHx"}},{"cell_type":"code","source":["categorical_features"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"crjM_QOB354k","executionInfo":{"status":"ok","timestamp":1730641032216,"user_tz":-330,"elapsed":38,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"27be34bb-5de5-4777-fe51-d199351fc764"},"execution_count":53,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['work_type', 'smoking_status']"]},"metadata":{},"execution_count":53}]},{"cell_type":"code","source":["df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"6nVcs6Gn53X3","executionInfo":{"status":"ok","timestamp":1730641032216,"user_tz":-330,"elapsed":34,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"ea357d12-c85a-4745-fbfc-749a1fce4864"},"execution_count":54,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Index: 5109 entries, 0 to 5109\n","Data columns (total 11 columns):\n"," #   Column             Non-Null Count  Dtype  \n","---  ------             --------------  -----  \n"," 0   gender             5109 non-null   int64  \n"," 1   age                5109 non-null   float64\n"," 2   hypertension       5109 non-null   int64  \n"," 3   heart_disease      5109 non-null   int64  \n"," 4   ever_married       5109 non-null   int64  \n"," 5   work_type          5109 non-null   object \n"," 6   Residence_type     5109 non-null   int64  \n"," 7   avg_glucose_level  5109 non-null   float64\n"," 8   bmi                5109 non-null   float64\n"," 9   smoking_status     5109 non-null   object \n"," 10  stroke             5109 non-null   int64  \n","dtypes: float64(3), int64(6), object(2)\n","memory usage: 479.0+ KB\n"]}]},{"cell_type":"code","source":["df.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":429},"id":"18yd1PMQ0iLK","executionInfo":{"status":"ok","timestamp":1730641032217,"user_tz":-330,"elapsed":31,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"8a51d5de-641c-4814-8324-86f38aa145a3"},"execution_count":55,"outputs":[{"output_type":"execute_result","data":{"text/plain":["gender               0\n","age                  0\n","hypertension         0\n","heart_disease        0\n","ever_married         0\n","work_type            0\n","Residence_type       0\n","avg_glucose_level    0\n","bmi                  0\n","smoking_status       0\n","stroke               0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>gender</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>age</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>hypertension</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>heart_disease</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>ever_married</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>work_type</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Residence_type</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>avg_glucose_level</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>bmi</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>smoking_status</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>stroke</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":55}]},{"cell_type":"code","source":["# Drop rows with any null values in the relevant columns\n","df = df.dropna(subset=['work_type', 'smoking_status'])\n","\n","# Ensure proper data types\n","df['work_type'] = df['work_type'].astype(str)\n","df['smoking_status'] = df['smoking_status'].astype(str)\n","\n","# Create a OneHotEncoder instance\n","ohe = OneHotEncoder()\n","\n","# Fit and transform the categorical columns\n","encoded_features = ohe.fit_transform(df[['work_type', 'smoking_status']])\n","\n","# Create a DataFrame with the new encoded features\n","encoded_df = pd.DataFrame(encoded_features.toarray(), columns=ohe.get_feature_names_out(['work_type', 'smoking_status']))\n","\n","# Concatenate the original DataFrame with the new one, dropping the original columns\n","df = pd.concat([df.drop(['work_type', 'smoking_status'], axis=1), encoded_df], axis=1)\n","\n","print(df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"r7pHlQZd8-wk","executionInfo":{"status":"ok","timestamp":1730641032217,"user_tz":-330,"elapsed":29,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"d7fa88eb-f997-4f10-cb66-731f4818328e"},"execution_count":56,"outputs":[{"output_type":"stream","name":"stdout","text":["      gender   age  hypertension  heart_disease  ever_married  Residence_type  \\\n","0        1.0  67.0           0.0            1.0           1.0             1.0   \n","1        0.0  61.0           0.0            0.0           1.0             0.0   \n","2        1.0  80.0           0.0            1.0           1.0             0.0   \n","3        0.0  49.0           0.0            0.0           1.0             1.0   \n","4        0.0  79.0           1.0            0.0           1.0             0.0   \n","...      ...   ...           ...            ...           ...             ...   \n","5106     0.0  81.0           0.0            0.0           1.0             1.0   \n","5107     0.0  35.0           0.0            0.0           1.0             0.0   \n","5108     1.0  51.0           0.0            0.0           1.0             0.0   \n","5109     0.0  44.0           0.0            0.0           1.0             1.0   \n","3116     NaN   NaN           NaN            NaN           NaN             NaN   \n","\n","      avg_glucose_level        bmi  stroke  work_type_Govt_job  \\\n","0                228.69  36.600000     1.0                 0.0   \n","1                202.21  28.893237     1.0                 0.0   \n","2                105.92  32.500000     1.0                 0.0   \n","3                171.23  34.400000     1.0                 0.0   \n","4                174.12  24.000000     1.0                 0.0   \n","...                 ...        ...     ...                 ...   \n","5106             125.20  40.000000     0.0                 0.0   \n","5107              82.99  30.600000     0.0                 0.0   \n","5108             166.29  25.600000     0.0                 1.0   \n","5109              85.28  26.200000     0.0                 NaN   \n","3116                NaN        NaN     NaN                 0.0   \n","\n","      work_type_Never_worked  work_type_Private  work_type_Self-employed  \\\n","0                        0.0                1.0                      0.0   \n","1                        0.0                0.0                      1.0   \n","2                        0.0                1.0                      0.0   \n","3                        0.0                1.0                      0.0   \n","4                        0.0                0.0                      1.0   \n","...                      ...                ...                      ...   \n","5106                     0.0                0.0                      1.0   \n","5107                     0.0                1.0                      0.0   \n","5108                     0.0                0.0                      0.0   \n","5109                     NaN                NaN                      NaN   \n","3116                     0.0                0.0                      0.0   \n","\n","      work_type_children  smoking_status_Unknown  \\\n","0                    0.0                     0.0   \n","1                    0.0                     0.0   \n","2                    0.0                     0.0   \n","3                    0.0                     0.0   \n","4                    0.0                     0.0   \n","...                  ...                     ...   \n","5106                 0.0                     0.0   \n","5107                 0.0                     0.0   \n","5108                 0.0                     1.0   \n","5109                 NaN                     NaN   \n","3116                 1.0                     1.0   \n","\n","      smoking_status_formerly smoked  smoking_status_never smoked  \\\n","0                                1.0                          0.0   \n","1                                0.0                          1.0   \n","2                                0.0                          1.0   \n","3                                0.0                          0.0   \n","4                                0.0                          1.0   \n","...                              ...                          ...   \n","5106                             0.0                          1.0   \n","5107                             1.0                          0.0   \n","5108                             0.0                          0.0   \n","5109                             NaN                          NaN   \n","3116                             0.0                          0.0   \n","\n","      smoking_status_smokes  \n","0                       0.0  \n","1                       0.0  \n","2                       0.0  \n","3                       1.0  \n","4                       0.0  \n","...                     ...  \n","5106                    0.0  \n","5107                    0.0  \n","5108                    0.0  \n","5109                    NaN  \n","3116                    0.0  \n","\n","[5110 rows x 18 columns]\n"]}]},{"cell_type":"code","source":["df = df.drop(df.index[-2:])"],"metadata":{"id":"MPnvBYhe8K8z","executionInfo":{"status":"ok","timestamp":1730641032217,"user_tz":-330,"elapsed":20,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}}},"execution_count":57,"outputs":[]},{"cell_type":"code","source":["df.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":648},"id":"kF1m5fH6-dbH","executionInfo":{"status":"ok","timestamp":1730641032824,"user_tz":-330,"elapsed":625,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"38d9c9ca-4db3-4bcf-cf45-ed9fbad9184d"},"execution_count":58,"outputs":[{"output_type":"execute_result","data":{"text/plain":["gender                            0\n","age                               0\n","hypertension                      0\n","heart_disease                     0\n","ever_married                      0\n","Residence_type                    0\n","avg_glucose_level                 0\n","bmi                               0\n","stroke                            0\n","work_type_Govt_job                0\n","work_type_Never_worked            0\n","work_type_Private                 0\n","work_type_Self-employed           0\n","work_type_children                0\n","smoking_status_Unknown            0\n","smoking_status_formerly smoked    0\n","smoking_status_never smoked       0\n","smoking_status_smokes             0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>gender</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>age</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>hypertension</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>heart_disease</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>ever_married</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Residence_type</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>avg_glucose_level</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>bmi</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>stroke</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>work_type_Govt_job</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>work_type_Never_worked</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>work_type_Private</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>work_type_Self-employed</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>work_type_children</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>smoking_status_Unknown</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>smoking_status_formerly smoked</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>smoking_status_never smoked</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>smoking_status_smokes</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":58}]},{"cell_type":"code","source":["df.head(3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":180},"id":"TTyQBvG3M53m","executionInfo":{"status":"ok","timestamp":1730641032824,"user_tz":-330,"elapsed":23,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"de059cd8-233d-4a5d-8fbd-bacb4e566bc4"},"execution_count":59,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   gender   age  hypertension  heart_disease  ever_married  Residence_type  \\\n","0     1.0  67.0           0.0            1.0           1.0             1.0   \n","1     0.0  61.0           0.0            0.0           1.0             0.0   \n","2     1.0  80.0           0.0            1.0           1.0             0.0   \n","\n","   avg_glucose_level        bmi  stroke  work_type_Govt_job  \\\n","0             228.69  36.600000     1.0                 0.0   \n","1             202.21  28.893237     1.0                 0.0   \n","2             105.92  32.500000     1.0                 0.0   \n","\n","   work_type_Never_worked  work_type_Private  work_type_Self-employed  \\\n","0                     0.0                1.0                      0.0   \n","1                     0.0                0.0                      1.0   \n","2                     0.0                1.0                      0.0   \n","\n","   work_type_children  smoking_status_Unknown  smoking_status_formerly smoked  \\\n","0                 0.0                     0.0                             1.0   \n","1                 0.0                     0.0                             0.0   \n","2                 0.0                     0.0                             0.0   \n","\n","   smoking_status_never smoked  smoking_status_smokes  \n","0                          0.0                    0.0  \n","1                          1.0                    0.0  \n","2                          1.0                    0.0  "],"text/html":["\n","  <div id=\"df-21c0ab3b-f90e-4f71-a122-1c6d8383620c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>gender</th>\n","      <th>age</th>\n","      <th>hypertension</th>\n","      <th>heart_disease</th>\n","      <th>ever_married</th>\n","      <th>Residence_type</th>\n","      <th>avg_glucose_level</th>\n","      <th>bmi</th>\n","      <th>stroke</th>\n","      <th>work_type_Govt_job</th>\n","      <th>work_type_Never_worked</th>\n","      <th>work_type_Private</th>\n","      <th>work_type_Self-employed</th>\n","      <th>work_type_children</th>\n","      <th>smoking_status_Unknown</th>\n","      <th>smoking_status_formerly smoked</th>\n","      <th>smoking_status_never smoked</th>\n","      <th>smoking_status_smokes</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1.0</td>\n","      <td>67.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>228.69</td>\n","      <td>36.600000</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.0</td>\n","      <td>61.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>202.21</td>\n","      <td>28.893237</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.0</td>\n","      <td>80.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>105.92</td>\n","      <td>32.500000</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-21c0ab3b-f90e-4f71-a122-1c6d8383620c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-21c0ab3b-f90e-4f71-a122-1c6d8383620c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-21c0ab3b-f90e-4f71-a122-1c6d8383620c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-36dc68cd-9d0a-493c-a218-39de6c794a76\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-36dc68cd-9d0a-493c-a218-39de6c794a76')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-36dc68cd-9d0a-493c-a218-39de6c794a76 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 5108,\n  \"fields\": [\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4926065373686398,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22.615786610388614,\n        \"min\": 0.08,\n        \"max\": 82.0,\n        \"num_unique_values\": 104,\n        \"samples\": [\n          45.0,\n          24.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hypertension\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.29665847567417125,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"heart_disease\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.22610472112223257,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ever_married\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4750134288891602,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Residence_type\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.49998451285570505,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avg_glucose_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 45.28849617281817,\n        \"min\": 55.12,\n        \"max\": 271.74,\n        \"num_unique_values\": 3977,\n        \"samples\": [\n          178.29,\n          78.68\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.698896435422668,\n        \"min\": 10.3,\n        \"max\": 97.6,\n        \"num_unique_values\": 419,\n        \"samples\": [\n          36.3,\n          17.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"stroke\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2153598548605709,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"work_type_Govt_job\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3348136139870447,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"work_type_Never_worked\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06549243611104676,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"work_type_Private\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4947737245569358,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"work_type_Self-employed\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3669539785947576,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"work_type_children\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3410068113282625,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoking_status_Unknown\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.45920261959770625,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoking_status_formerly smoked\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.37833778250142847,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoking_status_never smoked\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.48295894354995283,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoking_status_smokes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.36142794663447836,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":59}]},{"cell_type":"code","source":["sns.heatmap(df[numerical_features].corr(), annot = True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"kRgjfGKOB1ys","executionInfo":{"status":"ok","timestamp":1730641035395,"user_tz":-330,"elapsed":2591,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"fbb279b1-4987-4713-d520-e103b11f6db1"},"execution_count":60,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: >"]},"metadata":{},"execution_count":60},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["There is no correlation hence we can go for model prediction"],"metadata":{"id":"j-BngKxsB5K9"}},{"cell_type":"code","source":["# Define features and target\n","X = df.drop('stroke', axis=1)\n","y = df['stroke']"],"metadata":{"id":"69a2uiLz-_BF","executionInfo":{"status":"ok","timestamp":1730641035396,"user_tz":-330,"elapsed":16,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}}},"execution_count":61,"outputs":[]},{"cell_type":"code","source":["# Split data\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"],"metadata":{"id":"4nzIfhav_XoY","executionInfo":{"status":"ok","timestamp":1730641035396,"user_tz":-330,"elapsed":15,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}}},"execution_count":62,"outputs":[]},{"cell_type":"markdown","source":["As our target column is imabalnce we are fixing this using SMOTE"],"metadata":{"id":"8pPsfYWaD_cj"}},{"cell_type":"code","source":["# Apply SMOTE to the training data\n","smote = SMOTE(random_state=42)\n","X_train_resampled, y_train_resampled = smote.fit_resample(X_train, y_train)\n","\n","# Check the class distribution after SMOTE\n","print(\"Original training set shape:\", X_train.shape, \"Class distribution:\", y_train.value_counts())\n","print(\"Resampled training set shape:\", X_train_resampled.shape, \"Class distribution:\", pd.Series(y_train_resampled).value_counts())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"htyKdLjrD-X4","executionInfo":{"status":"ok","timestamp":1730641035397,"user_tz":-330,"elapsed":15,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"9f096476-78fa-44f9-9962-8565472fc2ca"},"execution_count":63,"outputs":[{"output_type":"stream","name":"stdout","text":["Original training set shape: (4086, 17) Class distribution: stroke\n","0.0    3899\n","1.0     187\n","Name: count, dtype: int64\n","Resampled training set shape: (7798, 17) Class distribution: stroke\n","0.0    3899\n","1.0    3899\n","Name: count, dtype: int64\n"]}]},{"cell_type":"code","source":["df.head(3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":180},"id":"yrie1MNoM-QN","executionInfo":{"status":"ok","timestamp":1730641035397,"user_tz":-330,"elapsed":13,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"b26acff4-ae15-44d9-8011-ab5188cc4023"},"execution_count":64,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   gender   age  hypertension  heart_disease  ever_married  Residence_type  \\\n","0     1.0  67.0           0.0            1.0           1.0             1.0   \n","1     0.0  61.0           0.0            0.0           1.0             0.0   \n","2     1.0  80.0           0.0            1.0           1.0             0.0   \n","\n","   avg_glucose_level        bmi  stroke  work_type_Govt_job  \\\n","0             228.69  36.600000     1.0                 0.0   \n","1             202.21  28.893237     1.0                 0.0   \n","2             105.92  32.500000     1.0                 0.0   \n","\n","   work_type_Never_worked  work_type_Private  work_type_Self-employed  \\\n","0                     0.0                1.0                      0.0   \n","1                     0.0                0.0                      1.0   \n","2                     0.0                1.0                      0.0   \n","\n","   work_type_children  smoking_status_Unknown  smoking_status_formerly smoked  \\\n","0                 0.0                     0.0                             1.0   \n","1                 0.0                     0.0                             0.0   \n","2                 0.0                     0.0                             0.0   \n","\n","   smoking_status_never smoked  smoking_status_smokes  \n","0                          0.0                    0.0  \n","1                          1.0                    0.0  \n","2                          1.0                    0.0  "],"text/html":["\n","  <div id=\"df-4a732815-7340-4cdf-a087-2800ee780fab\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>gender</th>\n","      <th>age</th>\n","      <th>hypertension</th>\n","      <th>heart_disease</th>\n","      <th>ever_married</th>\n","      <th>Residence_type</th>\n","      <th>avg_glucose_level</th>\n","      <th>bmi</th>\n","      <th>stroke</th>\n","      <th>work_type_Govt_job</th>\n","      <th>work_type_Never_worked</th>\n","      <th>work_type_Private</th>\n","      <th>work_type_Self-employed</th>\n","      <th>work_type_children</th>\n","      <th>smoking_status_Unknown</th>\n","      <th>smoking_status_formerly smoked</th>\n","      <th>smoking_status_never smoked</th>\n","      <th>smoking_status_smokes</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1.0</td>\n","      <td>67.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>228.69</td>\n","      <td>36.600000</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.0</td>\n","      <td>61.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>202.21</td>\n","      <td>28.893237</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.0</td>\n","      <td>80.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>105.92</td>\n","      <td>32.500000</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4a732815-7340-4cdf-a087-2800ee780fab')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-4a732815-7340-4cdf-a087-2800ee780fab button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4a732815-7340-4cdf-a087-2800ee780fab');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-60799d21-0074-4290-b32e-7371f3481f26\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-60799d21-0074-4290-b32e-7371f3481f26')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-60799d21-0074-4290-b32e-7371f3481f26 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 5108,\n  \"fields\": [\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4926065373686398,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22.615786610388614,\n        \"min\": 0.08,\n        \"max\": 82.0,\n        \"num_unique_values\": 104,\n        \"samples\": [\n          45.0,\n          24.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hypertension\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.29665847567417125,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"heart_disease\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.22610472112223257,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ever_married\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4750134288891602,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Residence_type\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.49998451285570505,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avg_glucose_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 45.28849617281817,\n        \"min\": 55.12,\n        \"max\": 271.74,\n        \"num_unique_values\": 3977,\n        \"samples\": [\n          178.29,\n          78.68\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.698896435422668,\n        \"min\": 10.3,\n        \"max\": 97.6,\n        \"num_unique_values\": 419,\n        \"samples\": [\n          36.3,\n          17.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"stroke\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2153598548605709,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"work_type_Govt_job\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3348136139870447,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"work_type_Never_worked\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06549243611104676,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"work_type_Private\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4947737245569358,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"work_type_Self-employed\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3669539785947576,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"work_type_children\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3410068113282625,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoking_status_Unknown\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.45920261959770625,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoking_status_formerly smoked\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.37833778250142847,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoking_status_never smoked\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.48295894354995283,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoking_status_smokes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.36142794663447836,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":64}]},{"cell_type":"code","source":["# Scale features\n","scaler = StandardScaler()\n","X_train = scaler.fit_transform(X_train)\n","X_test = scaler.transform(X_test)"],"metadata":{"id":"AcqxwU30_fwe","executionInfo":{"status":"ok","timestamp":1730641035397,"user_tz":-330,"elapsed":10,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}}},"execution_count":65,"outputs":[]},{"cell_type":"code","source":["# Train model\n","model = RandomForestClassifier(random_state=42)\n","model.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":80},"id":"ilL0muuz_hXa","executionInfo":{"status":"ok","timestamp":1730641037358,"user_tz":-330,"elapsed":1971,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"391165bb-8cef-4121-df1e-aec91d7c0e20"},"execution_count":66,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier(random_state=42)"],"text/html":["<style>#sk-container-id-1 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: black;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-1 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-1 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-1 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-1 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-1 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-1 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-1 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-1 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-1 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-1 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-1 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: block;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-1 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-1 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-1 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-1 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-1 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-1 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 1ex;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-1 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-1 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-1 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;RandomForestClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">?<span>Documentation for RandomForestClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier(random_state=42)</pre></div> </div></div></div></div>"]},"metadata":{},"execution_count":66}]},{"cell_type":"code","source":["# Make predictions\n","y_pred = model.predict(X_test)"],"metadata":{"id":"eGGnRs6u_mX8","executionInfo":{"status":"ok","timestamp":1730641037359,"user_tz":-330,"elapsed":8,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}}},"execution_count":67,"outputs":[]},{"cell_type":"code","source":["# Evaluate model\n","print(confusion_matrix(y_test, y_pred))\n","print(classification_report(y_test, y_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"P2RSHzk3_p_u","executionInfo":{"status":"ok","timestamp":1730641037359,"user_tz":-330,"elapsed":7,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"9c9718be-71fa-4c35-d47d-e1a561c7289c"},"execution_count":68,"outputs":[{"output_type":"stream","name":"stdout","text":["[[958   2]\n"," [ 62   0]]\n","              precision    recall  f1-score   support\n","\n","         0.0       0.94      1.00      0.97       960\n","         1.0       0.00      0.00      0.00        62\n","\n","    accuracy                           0.94      1022\n","   macro avg       0.47      0.50      0.48      1022\n","weighted avg       0.88      0.94      0.91      1022\n","\n"]}]},{"cell_type":"markdown","source":["Implementing KNN"],"metadata":{"id":"azYTrawYV6YF"}},{"cell_type":"code","source":["# List to store the accuracy for different values of k\n","k_values = range(1, 21)  # Test k from 1 to 20\n","accuracy = []"],"metadata":{"id":"YqAvXYfRWByv","executionInfo":{"status":"ok","timestamp":1730641037360,"user_tz":-330,"elapsed":6,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}}},"execution_count":69,"outputs":[]},{"cell_type":"code","source":["# Loop to find the ideal k\n","for k in k_values:\n","    knn = KNeighborsClassifier(n_neighbors=k)\n","    # Perform 5-fold cross-validation and get the mean accuracy\n","    cv_scores = cross_val_score(knn, X_train, y_train, cv=5)\n","    accuracy.append(cv_scores.mean())"],"metadata":{"id":"OW-cFqUaWB3E","executionInfo":{"status":"ok","timestamp":1730641047858,"user_tz":-330,"elapsed":10504,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}}},"execution_count":70,"outputs":[]},{"cell_type":"code","source":["# Plot the results\n","plt.figure(figsize=(10, 6))\n","plt.plot(k_values, accuracy, marker='o')\n","plt.title('KNN: Finding the Ideal k')\n","plt.xlabel('Number of Neighbors (k)')\n","plt.ylabel('Mean Accuracy')\n","plt.xticks(k_values)\n","plt.grid()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"tYYexfT1WB7N","executionInfo":{"status":"ok","timestamp":1730641049651,"user_tz":-330,"elapsed":1799,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"cccdbe9d-c435-4ced-adff-c5ff30705665"},"execution_count":71,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Identify the best k\n","best_k = k_values[np.argmax(accuracy)]\n","print(f\"The ideal value for k is: {best_k}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"3JWmVDvEWB_a","executionInfo":{"status":"ok","timestamp":1730641049652,"user_tz":-330,"elapsed":16,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"39557c65-a530-4bcc-c5d5-fc5f58a328d4"},"execution_count":72,"outputs":[{"output_type":"stream","name":"stdout","text":["The ideal value for k is: 8\n"]}]},{"cell_type":"code","source":["# Create a KNN classifier with k=3\n","knn = KNeighborsClassifier(n_neighbors=8)\n","\n","# Fit the model\n","knn.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":80},"id":"6pNCxGmXU-vB","executionInfo":{"status":"ok","timestamp":1730641049652,"user_tz":-330,"elapsed":15,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"0ffca0f0-50d0-4459-8730-891bcc72d582"},"execution_count":73,"outputs":[{"output_type":"execute_result","data":{"text/plain":["KNeighborsClassifier(n_neighbors=8)"],"text/html":["<style>#sk-container-id-2 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: black;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-2 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-2 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-2 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-2 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-2 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-2 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-2 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-2 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-2 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-2 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-2 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-2 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-2 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-2 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-2 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: block;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","}\n","\n","#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-2 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-2 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-2 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-2 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-2 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-2 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-2 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-2 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-2 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-2 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 1ex;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-2 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-2 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-2 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier(n_neighbors=8)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;KNeighborsClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.neighbors.KNeighborsClassifier.html\">?<span>Documentation for KNeighborsClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>KNeighborsClassifier(n_neighbors=8)</pre></div> </div></div></div></div>"]},"metadata":{},"execution_count":73}]},{"cell_type":"code","source":["# Make predictions on the test set\n","y_pred = knn.predict(X_test)"],"metadata":{"id":"-_usF1O3VCyQ","executionInfo":{"status":"ok","timestamp":1730641049652,"user_tz":-330,"elapsed":12,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}}},"execution_count":74,"outputs":[]},{"cell_type":"code","source":["# Confusion matrix\n","print(confusion_matrix(y_test, y_pred))\n","\n","# Classification report\n","print(classification_report(y_test, y_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"xSjlemhwVC5R","executionInfo":{"status":"ok","timestamp":1730641049652,"user_tz":-330,"elapsed":11,"user":{"displayName":"Sumit Mahato","userId":"06881284553554394598"}},"outputId":"edf1847f-3006-45c5-9cb6-5b2bd10fa851"},"execution_count":75,"outputs":[{"output_type":"stream","name":"stdout","text":["[[960   0]\n"," [ 61   1]]\n","              precision    recall  f1-score   support\n","\n","         0.0       0.94      1.00      0.97       960\n","         1.0       1.00      0.02      0.03        62\n","\n","    accuracy                           0.94      1022\n","   macro avg       0.97      0.51      0.50      1022\n","weighted avg       0.94      0.94      0.91      1022\n","\n"]}]}]}